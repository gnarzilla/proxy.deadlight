# Deadlight Proxy v4.0 - Makefile
# Build system for the modular proxy server

# Project information
PROJECT = deadlight
VERSION = 4.0.0
PREFIX = /usr/local
BINDIR = $(PREFIX)/bin
LIBDIR = $(PREFIX)/lib
CONFDIR = /etc/deadlight
LOGDIR = /var/log/deadlight
CACHEDIR = /var/cache/deadlight

# Compiler and flags
CC = gcc
CFLAGS = -std=c99 -Wall -Wextra -pedantic -O2 -g
LDFLAGS = -Wl,--as-needed
LIBS = -lssl -lcrypto -lpthread

# Package config for GLib/GIO
GLIB_CFLAGS = $(shell pkg-config --cflags glib-2.0 gio-2.0)
GLIB_LIBS = $(shell pkg-config --libs glib-2.0 gio-2.0)

# All flags combined
ALL_CFLAGS = $(CFLAGS) $(GLIB_CFLAGS) -DDEADLIGHT_VERSION=\"$(VERSION)\"
ALL_LIBS = $(LIBS) $(GLIB_LIBS)

# Source files
CORE_SOURCES = main.c config.c context.c logging.c network.c ssl.c protocols.c plugins.c request.c utils.c
PLUGIN_SOURCES = plugins/adblocker.c plugins/logger.c plugins/stats.c plugins/auth.c
TEST_SOURCES = tests/test_main.c tests/test_config.c tests/test_network.c tests/test_ssl.c

# Object files
CORE_OBJECTS = $(CORE_SOURCES:.c=.o)
PLUGIN_OBJECTS = $(PLUGIN_SOURCES:.c=.o)
TEST_OBJECTS = $(TEST_SOURCES:.c=.o)

# Targets
MAIN_TARGET = $(PROJECT)
TEST_TARGET = $(PROJECT)_test
PLUGIN_TARGETS = plugins/libadblocker.so plugins/liblogger.so plugins/libstats.so plugins/libauth.so

# Default target
all: $(MAIN_TARGET) $(PLUGIN_TARGETS)

# Main executable
$(MAIN_TARGET): $(CORE_OBJECTS)
	@echo "🔗 Linking $(MAIN_TARGET)..."
	$(CC) $(LDFLAGS) -o $@ $^ $(ALL_LIBS)
	@echo "✅ Built $(MAIN_TARGET)"

# Plugin libraries
plugins/lib%.so: plugins/%.o
	@echo "🔗 Building plugin $@..."
	$(CC) -shared -fPIC -o $@ $< $(ALL_LIBS)

# Object files
%.o: %.c deadlight.h
	@echo "🔨 Compiling $<..."
	$(CC) $(ALL_CFLAGS) -fPIC -c $< -o $@

# Test executable
test: $(TEST_TARGET)
	@echo "🧪 Running tests..."
	./$(TEST_TARGET)

$(TEST_TARGET): $(TEST_OBJECTS) $(filter-out main.o,$(CORE_OBJECTS))
	@echo "🔗 Linking test executable..."
	$(CC) $(LDFLAGS) -o $@ $^ $(ALL_LIBS)

# Create necessary directories
dirs:
	@echo "📁 Creating directories..."
	mkdir -p plugins tests
	mkdir -p $(CONFDIR) $(LOGDIR) $(CACHEDIR)

# Install
install: $(MAIN_TARGET) $(PLUGIN_TARGETS)
	@echo "📦 Installing Deadlight Proxy..."
	install -d $(BINDIR) $(LIBDIR)/deadlight/plugins $(CONFDIR)
	install -m 755 $(MAIN_TARGET) $(BINDIR)/
	install -m 644 $(PLUGIN_TARGETS) $(LIBDIR)/deadlight/plugins/
	install -m 644 deadlight.conf.example $(CONFDIR)/deadlight.conf
	@echo "✅ Installation complete"

# Uninstall
uninstall:
	@echo "🗑️  Uninstalling Deadlight Proxy..."
	rm -f $(BINDIR)/$(MAIN_TARGET)
	rm -rf $(LIBDIR)/deadlight
	rm -rf $(CONFDIR)
	@echo "✅ Uninstallation complete"

# Clean
clean:
	@echo "🧹 Cleaning build files..."
	rm -f $(CORE_OBJECTS) $(PLUGIN_OBJECTS) $(TEST_OBJECTS)
	rm -f $(MAIN_TARGET) $(TEST_TARGET) $(PLUGIN_TARGETS)
	@echo "✅ Clean complete"

# Create example configuration
config:
	@echo "⚙️  Creating example configuration..."
	@cat > deadlight.conf.example << 'EOF'
# Deadlight Proxy v4.0 - Example Configuration
# Copy to /etc/deadlight/deadlight.conf and customize

[core]
port = 8080
bind_address = 0.0.0.0
max_connections = 500
connection_timeout = 30
buffer_size = 65536
log_level = info
log_file = 
worker_threads = 4

[ssl]
enabled = true
ca_cert_file = /etc/deadlight/ca.crt
ca_key_file = /etc/deadlight/ca.key
cert_cache_dir = /tmp/deadlight_certs
cert_cache_size = 1000
cert_validity_days = 30
cipher_suites = HIGH:!aNULL:!MD5
protocols = TLSv1.2,TLSv1.3

[protocols]
http_enabled = true
https_enabled = true
socks4_enabled = true
socks5_enabled = true
connect_enabled = true
websocket_enabled = true
protocol_detection_timeout = 5

[plugins]
enabled = true
plugin_dir = /usr/lib/deadlight/plugins
autoload = adblocker,logger,stats
builtin_enabled = true

[plugin.adblocker]
enabled = true
blocklist_url = https://raw.githubusercontent.com/StevenBlack/hosts/master/hosts
blocklist_file = /var/cache/deadlight/blocklist.txt
update_interval = 86400

[plugin.logger]
enabled = true
log_requests = true
log_responses = false
log_format = combined
log_file = /var/log/deadlight/access.log
max_log_size = 100MB
log_rotation = daily
EOF
	@echo "✅ Example configuration created"

# Development helpers
dev: all
	@echo "🚀 Starting development server..."
	./$(MAIN_TARGET) -v -c deadlight.conf.example

debug: CFLAGS += -DDEBUG -g3 -O0
debug: clean all

# Package creation
package: clean all
	@echo "📦 Creating package..."
	tar czf $(PROJECT)-$(VERSION).tar.gz \
		*.c *.h Makefile README.md LICENSE \
		plugins/ tests/ deadlight.conf.example

# Check dependencies
deps:
	@echo "🔍 Checking dependencies..."
	@pkg-config --exists glib-2.0 || (echo "❌ glib-2.0 not found" && exit 1)
	@pkg-config --exists gio-2.0 || (echo "❌ gio-2.0 not found" && exit 1)
	@echo "✅ Dependencies satisfied"

# Format code
format:
	@echo "🎨 Formatting code..."
	@find . -name "*.c" -o -name "*.h" | xargs clang-format -i

# Static analysis
analyze:
	@echo "🔍 Running static analysis..."
	@cppcheck --enable=all --inconclusive --std=c99 *.c

# Memory check
memcheck: $(MAIN_TARGET)
	@echo "🧠 Running memory check..."
	valgrind --leak-check=full --show-leak-kinds=all ./$(MAIN_TARGET) --test-mode

# Help
help:
	@echo "Deadlight Proxy v4.0 - Build System"
	@echo ""
	@echo "Targets:"
	@echo "  all        - Build main executable and plugins"
	@echo "  test       - Build and run tests"
	@echo "  install    - Install to system"
	@echo "  uninstall  - Remove from system"
	@echo "  clean      - Remove build files"
	@echo "  config     - Create example configuration"
	@echo "  dev        - Start development server"
	@echo "  debug      - Build with debug symbols"
	@echo "  package    - Create distribution package"
	@echo "  deps       - Check dependencies"
	@echo "  format     - Format source code"
	@echo "  analyze    - Run static analysis"
	@echo "  memcheck   - Run memory leak check"
	@echo "  help       - Show this help"

.PHONY: all test install uninstall clean config dev debug package deps format analyze memcheck help
